//
// Encog(tm) Core v3.3 - .Net Version
// http://www.heatonresearch.com/encog/
//
// Copyright 2008-2014 Heaton Research, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//   
// For more information on Heaton Research copyrights, licenses 
// and trademarks visit:
// http://www.heatonresearch.com/copyright
//
using System;

namespace Encog.Util.Normalize.Output
{
    /// <summary>
    /// Provides very basic functionality for output fields.  Primarily provides
    /// the ideal instance variable.
    /// </summary>
    [Serializable]
    public abstract class BasicOutputField : IOutputField
    {
        #region IOutputField Members

        /// <summary>
        /// Init this field for a new row.
        /// </summary>
        public abstract void RowInit();

        /// <summary>
        /// The numebr of fields that will actually be generated by 
        /// this field. For a simple field, this value is 1.
        /// </summary>
        public abstract int SubfieldCount { get; }

        /// <summary>
        /// Calculate the value for this field.  Specify subfield of zero
        /// if this is a simple field.
        /// </summary>
        /// <param name="subfield"> The subfield index.</param>
        /// <returns>The calculated value for this field.</returns>
        public abstract double Calculate(int subfield);

        /// <summary>
        /// Is this field part of the ideal data uses to train the
        /// neural network.
        /// </summary>
        public bool Ideal { get; set; }

        #endregion

        /// <summary>
        /// Calculate a ranged mapped value.
        /// </summary>
        /// <param name="value">The to map.</param>
        /// <param name="min">The minimum that the value param can be.</param>
        /// <param name="max">The maximum that the value param can be.</param>
        /// <param name="hi">The high value to map into.</param>
        /// <param name="lo">The low value to map into.</param>
        /// <returns>The mapped value.</returns>
        public static double Calculate(double value, double min,
                                       double max, double hi, double lo)
        {
            return ((value - min)/(max - min))*(hi - lo) + lo;
        }
    }
}
